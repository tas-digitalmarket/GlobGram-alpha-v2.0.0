name: Build Android APK (TWA)

on:
  push:
    tags:
      - 'v*.*.*'      # stable releases like v1.2.3
      - 'v*.*.*-*'    # pre-releases like v1.2.3-beta.1
  workflow_dispatch:

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    env:
      KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Verify Java
        run: |
          java -version
          echo "JAVA_HOME=$JAVA_HOME"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Bubblewrap
        run: npm i -g @bubblewrap/cli

      - name: Preseed Bubblewrap config (avoid prompts)
        shell: bash
        run: |
          set -eux
          mkdir -p "$HOME/.bubblewrap"
          cat > "$HOME/.bubblewrap/config.json" <<EOF
          {
            "jdkPath": "${JAVA_HOME}",
            "androidSdkPath": "${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          }
          EOF
          echo "Config:"
          cat "$HOME/.bubblewrap/config.json"

      - name: Compute App URL
        run: echo "APP_URL=https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/" >> $GITHUB_ENV

      - name: Init Bubblewrap project (non-interactive)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p twa
          cd twa
          # Ensure expect exists for automating Bubblewrap prompts
          if ! command -v expect >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y expect
          fi
          # Use the remote manifest URL directly (Bubblewrap expects a URL)
          MANIFEST_URL="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/main/public/manifest.webmanifest"
          # Compute domain and path from APP_URL for prompts
          DOMAIN=$(echo "$APP_URL" | sed -E 's#https?://([^/]+)/?.*#\1#')
          PATHPART=$(echo "$APP_URL" | sed -E 's#https?://[^/]+(/.*)#\1#'); PATHPART=${PATHPART:-/}
          echo "Domain: $DOMAIN, Path: $PATHPART"
          # Use expect to answer any remaining prompts non-interactively
          cat > run_init.expect <<'EOS'
          #!/usr/bin/expect -f
          set timeout -1
          set domain $env(DOMAIN)
          set pathpart $env(PATHPART)
          spawn bubblewrap init --manifest=$env(MANIFEST_URL) --directory . --skipPwaValidation
          expect {
            -re {(D|d)omain.*:} { send -- "$domain\r"; exp_continue }
            -re {(U|u)RL path.*:} { send -- "$pathpart\r"; exp_continue }
            -re {Please, enter details.*} { send -- "\r"; exp_continue }
            -re {(A|a)pp(lication)?\s+[Nn]ame.*:} { send -- "\r"; exp_continue }
            -re {(S|s)hort\s+[Nn]ame.*:} { send -- "\r"; exp_continue }
            -re {(L|l)auncher\s+(N|n)ame.*:} { send -- "\r"; exp_continue }
            -re {(P|p)ackage|(A|a)pplication\s+I[dD]).*:} { send -- "\r"; exp_continue }
            -re {(I|i)con(s)?\b.*\?:} { send -- "\r"; exp_continue }
            -re {(S|s)igning.*\?:} { send -- "\r"; exp_continue }
            -re {\([Yy]/[Nn]\)} { send -- "\r"; exp_continue }
            -re {[:?]\s*$} { send -- "\r"; exp_continue }
            eof
          }
          EOS
          chmod +x run_init.expect
          DOMAIN="$DOMAIN" PATHPART="$PATHPART" MANIFEST_URL="$MANIFEST_URL" ./run_init.expect
          bubblewrap build

      - name: Sign APK (if keystore provided)
        if: ${{ env.KEYSTORE_B64 != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "$KEYSTORE_B64" | base64 -d > keystore.jks
          SDK_DIR="${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
          export PATH="$SDK_DIR/build-tools/$(ls -1 "$SDK_DIR/build-tools" | sort -V | tail -n 1):$PATH"
          which apksigner
          apksigner sign --ks keystore.jks --ks-key-alias "$KEY_ALIAS" --ks-pass pass:"$STORE_PASSWORD" --key-pass pass:"$KEY_PASSWORD" twa/build/app-release-unsigned.apk
          mv twa/build/app-release-unsigned.apk globgram-twa-release.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            globgram-twa-release.apk
            twa/build/app-release.apk
          if-no-files-found: warn

      - name: Attach to GitHub Release (if tag)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            globgram-twa-release.apk
            twa/build/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
